## @file "vdjml/external/ext/libxml2.jam"
## part of VDJML project.
## Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
## Author Mikhail K Levin 2013-4

# Boost.build script for building libxml2 library <http://www.xmlsoft.org/>

import extension ;
import property ;
import project ;
import feature ;
import common ;
import regex ;
import path ;
import modules ;

extension.declare libxml2 ;

## make a list of source files and copy them to new location to isolate from headers
################################################################################
rule copy-source ( version : location ) {
      local src =
      buf c14n catalog chvalid debugXML dict DOCBparser encoding entities error 
      globals hash HTMLparser HTMLtree legacy list parser 
      parserInternals pattern relaxng SAX2 SAX schematron tree uri valid 
      xinclude xlink xmlIO xmlmemory xmlreader xmlregexp xmlmodule xmlsave 
      xmlschemas xmlschemastypes xmlunicode xmlwriter xpath xpointer xmlstring
##    nanoftp nanohttp
##    threads
   ;
   
   local files-dest = [ path.join $(GENERATED_LIB) libxml ] ;
   local files-out = ;
   for local file in $(src) {
      local file-out = [ path.join $(files-dest) $(file).c ] ;
      files-out += $(file-out) ;
      make-singleton $(file-out) : [ path.join $(location) $(file).c ] : @common.copy ;
   }
   
   local file = threads ;
   local file-out = [ path.join $(files-dest) $(file).c ] ;
   files-out += $(file-out) ;
   make-singleton $(file-out) 
      : [ path.join $(location) $(file).c ] 
      : @threads_c
      : <version>$(version)
   ;
   
   return $(files-out) ;
}

## 
################################################################################
rule threads_c ( targets * : sources * : properties * ) {
   local src = [ read_file $(sources:G=) ] ;
   local v = [ property.select <version> : $(properties) ] ;
   if $(v:G=) = "2.9.0" { #fix bug
      local str1 = "static pthread_once_t once_control = PTHREAD_ONCE_INIT;" ;
      local str2 = $(str1)"
/*bug fix*/
static pthread_once_t once_control_init = PTHREAD_ONCE_INIT;" ;
      src = [ regex.replace $(src) $(str1) $(str2) ] ;
      
      str1 = "    once_control = PTHREAD_ONCE_INIT;" ;
      str2 = "
/*bug fix*/
    once_control = once_control_init;" ;
      src = [ regex.replace $(src) $(str1) $(str2) ] ;
   }

   STR on $(<) = $(src) ;
}
actions threads_c { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
rule copy-headers ( version : location ) {
   local files-out = ;
   local lib-dir = [ path.join $(GENERATED_LIB) libxml ] ;
   for local file in [ path.glob $(location) : *.h *trionan.c : *config.h ] {
      local file-out = [ path.join $(lib-dir) $(file:D=) ] ;
      files-out += $(file-out) ;
      make-singleton $(file-out) : $(file) : @common.copy ;
   }

   local incl = [ path.join $(location) include libxml ] ;
   for local file in [ path.glob $(incl) : *.h : *xmlversion.h ] {
      local file-out = [ path.join $(GENERATED_INCLUDE) libxml $(file:D=) ] ;
      files-out += $(file-out) ;
      make-singleton $(file-out) : $(file) : @common.copy ;
   }
   
   make-singleton config.h 
      : $(PROJ_ROOT)/external/ext/libxml2_config.h 
      : @config_h
      : <version>$(version) <location>$(lib-dir)
   ;
   
   make-singleton xmlversion.h 
      : $(incl)/xmlversion.h 
      : @xmlversion_h
      : <version>$(version) <location>$(GENERATED_INCLUDE)/libxml
   ;
   
   return $(files-out) config.h xmlversion.h ;
}

## 
################################################################################
rule config_h ( targets * : sources * : properties * ) {
   local src = [ read_file $(sources:G=) ] ;
   
   local v = [ property.select <version> : $(properties) ] ;
   v = $(v:G=) ;
   src = [ regex.replace $(src) "@VERSION@" $(v) ] ;

   STR on $(<) = $(src) ;
}
actions config_h { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
local rule undef ( src : expr ) {
   local re = "#define +$(expr)" ;
   return [ regex.replace $(src) $(re) "#undef $(expr)" ] ;
}

## 
################################################################################
rule xmlversion_h ( targets * : sources * : properties * ) {
   local src = [ read_file $(sources:G=) ] ;
   src = [ undef $(src) : LIBXML_FTP_ENABLED ] ;
   src = [ undef $(src) : LIBXML_HTTP_ENABLED ] ;
   src = [ undef $(src) : LIBXML_ZLIB_ENABLED ] ;
   
   STR on $(<) = $(src) ;
}
actions xmlversion_h { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
rule init ( version ? : location ? : options * ) {
   
   local src = [ copy-source $(version) : $(location) ] ;

   local headers = [ copy-headers $(version) : $(location) ] ;
   
   if [ modules.peek : OS ] = NT {
      if ! $(ICONV) && ! ( $(ICONV_DLL) && $(ICONV2_LIB) && $(ICONV_H) ) { 
         EXIT "
         ERROR:
         Please set variable ICONV to location of pre-compiled iconv library.
         See doc/user-config.jam
         " ;
      }
      ICONV_LIB ?= $(ICONV[1])/lib/iconv_a.lib ;
      ICONV_DLL ?= $(ICONV[1])/bin/iconv.dll $(ICONV[1])/lib/iconv.lib ;
      ICONV_H ?= $(ICONV[1])/include ;
      
      lib iconv
         : #sources
         : #requirements
            <include>$(ICONV_H)
            <link>shared:<file>$(ICONV_DLL)
            <link>static:<file>$(ICONV_LIB)
         : #default options
         : #usage requirements
            <include>$(ICONV_H)
      ;
   } else {
      lib iconv : : <name>iconv ;
   }
   
   
   
   lib dl
      : #sources
      : #requirements
         <name>dl
      : #default options
      : #usage requirements
   ;
   explicit iconv dl ;
   
   local requirements =
      [ extension.define libxml2 $(version) : $(location) : $(options) ]
      <include>$(GENERATED_INCLUDE)
      <include>$(GENERATED_LIB)/libxml
      <libxml2-version>$(version)
      <libxml2-location>$(location)
      <implicit-dependency>$(headers)
      <dependency>$(headers)
      <define>_REENTRANT
      <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>_CRT_NONSTDC_NO_DEPRECATE
      <toolset>msvc:<library>iconv
      <toolset>darwin:<library>iconv
      <link>shared:<define>NOLIBTOOL
      <target-os>linux,<link>shared:<library>dl
   ;
   
   lib libxml2
      : #sources
         $(src)
      : $(requirements)
      : #default build options
      : #usage requirements
         <include>$(GENERATED_INCLUDE) 
         <link>shared:<define>NOLIBTOOL
   ;
}
