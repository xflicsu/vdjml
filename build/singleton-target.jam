## vdjml/build/singleton-target.jam
## part of VDJML project.
## Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
## Author Mikhail K Levin 2013-4

import "class" : new ;
import project ;
import property ;
import property-set ;
import regex ;
import targets ;

class make-target-singleton : basic-target {
   import type regex virtual-target ;

   rule __init__ ( name : project : sources * : requirements *
      : default-build * : usage-requirements * )
   {
      basic-target.__init__ $(name) : $(project) : $(sources) :
         $(requirements) : $(default-build) : $(usage-requirements) ;
   }

   rule construct ( name : source-targets * : property-set )
   {
      local action = [ $(property-set).get <action> ] ;
      # 'm' will always be set -- we add '@' ourselves in the 'make' rule
      # below.
      local m = [ MATCH ^@(.*) : $(action) ] ;
      local location = [ $(property-set).get <location> ] ;
      local props ;
      local remove = 
         <link> <runtime-link> <variant> <debug-symbols> <define> <inlining> <optimization> 
         <threading> <runtime-debugging> <toolset> <toolset-gcc:version> <pic>
      ;
      for local e in [ $(property-set).raw ] {
         if ! [ set.intersection $(remove) : $(e:G) ] {
            props += $(e) ;
            # echo [ feature.attributes $(e:G) ] $(e) ;
         } else {
         }
      }
      local prop-set = [ property-set.create $(props) ] ;
      local a = [ new action $(source-targets) : $(m[1]) : $(prop-set) ] ;
      local t = [ new file-target $(self.name) exact : [ type.type
         $(self.name) ] : $(self.project) : $(a) ] ;
      return [ property-set.empty ] [ virtual-target.register $(t) ] ;
   }
}

rule make-singleton ( target-name : sources * : generating-rule + : requirements * :
   usage-requirements * ) {
   local project = [ project.current ] ;

   # The '@' sign causes the feature.jam module to qualify rule name with the
   # module name of current project, if needed.
   local m = [ MATCH ^(@).* : $(generating-rule) ] ;
   if ! $(m)
   {
      generating-rule = @$(generating-rule) ;
   }
   requirements += <action>$(generating-rule) ;
   targets.main-target-alternative
      [ new make-target-singleton $(target-name) : $(project)
         : [ targets.main-target-sources $(sources) : $(target-name) ]
         : [ targets.main-target-requirements $(requirements) : $(project) ]
         : [ targets.main-target-default-build : $(project) ]
         : [ targets.main-target-usage-requirements $(usage-requirements) :
            $(project) ] ] ;
}

IMPORT $(__name__) : make-singleton : : make-singleton ;
