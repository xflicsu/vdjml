## vdjml/binding/python/jamfile.jam
## part of VDJML project.
## Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
## Author Mikhail K Levin 2013-4

project vdjml/binding/python
    : build-dir $(PYTHON_OUT)
    : requirements 
;

import python modules path common regex ;

author = "Mikhail K. Levin" ;
email = "mlevin@svarnetics.org" ;
proj_url = "https://github.com/VDJML/vdjml" ;
python_extension_name = _vdjml_py ;

python-extension $(python_extension_name)
   : 
      [ glob *.cpp ]
      /boost/python//boost_python /boost//iostreams
      /vdjml//libxml2 
      /vdjml//libvdjml
   :
    $(LIB_REQUIREMENTS)
    #enable runtime linking from same directory
    <toolset>gcc,<target-os>linux:<linkflags>"-Wl,-R'$ORIGIN/'"
    <toolset>clang,<target-os>linux:<linkflags>"-Wl,-R'$ORIGIN/'"
    <hardcode-dll-paths>true
;

install stage_lib
   : 
      $(python_extension_name)
   : 
      <location>$(PYTHON_OUT)/vdjml
      <install-dependencies>on
      <install-type>LIB
      <dependency>__init__.py
      <dependency>setup.py
      <dependency>MANIFEST.in
      <dependency>conf.py
;

version = [ process_version_string $(VDJML_VERSION) ] ;

## 
################################################################################
make __init__.py : : @init_py : <location>$(PYTHON_OUT)/vdjml ;
actions init_py {
    @($(STDOUT):E=#!/usr/bin/env python
'''
.. automodule:: vdjml._vdjml_py
   :members:
   :undoc-members:

'''
from $(python_extension_name) import *
__version__ = '$(version[1]).$(version[2]).$(version[3])'
) > "$(<)"
}

## 
################################################################################
make setup.py : : @setup_py : <location>$(PYTHON_OUT) ;
rule setup_py ( targets * : sources * : properties * ) {
    local data_files = "       'vdjml/"$(sources:G=)"'," ;
    
    local platform = [ modules.peek : OS ] ;
    
    local src = 
        "#!/usr/bin/env python"
        ""
        "from distutils.core import setup"
        "from distutils.command.install_data import install_data"
        ""
        "class smart_install_data(install_data):"
        "    def run(self):"
        "        install_cmd = self.get_finalized_command('install')"
        "        self.install_dir = getattr(install_cmd, 'install_lib')"
        "        return install_data.run(self)"
        "" 
        "setup("
        "    name = 'VDJMLpy',"
        "    version            = '$(version[1]).$(version[2]).$(version[3])',"
        "    description        = '$(VDJML_DESCRIPTION)',"
        "    long_description   = '$(VDJML_DESCRIPTION)',"
        "    license            = '$(VDJML_LICENSE)',"
        "    author             = '$(author)',"
        "    author_email       = '$(email)',"
        "    url                = '$(proj_url)',"
        "    packages           = ['vdjml'],"
        "    cmdclass           = {'install_data' : smart_install_data},"
        "    platforms          = ['$(platform)'],"
        "    data_files         = [('vdjml', [" $(data_files) "    ] )]"
        ")"
        ""
    ;
    src = $(src:J="
") ;

    STR on $(<) = $(src) ;
}
actions setup_py { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
make conf.py : : @sphinx_conf : <location>$(PYTHON_OUT)/doc/src ;
rule sphinx_conf ( targets * : sources * : properties * ) {
   local src = [ read_file $(PROJ_ROOT)/build/sphinx_config.py ] ;
   src = [ regex.replace $(src) "__PROJECT__" "VDJML" ] ;
   src = [ regex.replace $(src) "__AUTHOR__" $(author) ] ;
   src = [ regex.replace $(src) "__DESCRIPTION__" $(VDJML_DESCRIPTION) ] ;
   src = [ regex.replace $(src) "__VERSION__" $(version[1]).$(version[2]).$(version[3]) ] ;
   STR on $(<) = $(src) ;
}
actions sphinx_conf { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
make MANIFEST.in : : @manifest_in : <location>$(PYTHON_OUT) ;
rule manifest_in ( targets * : sources * : properties * ) {
    local src = 
        "recursive-include test *.py"
        "recursive-include doc *"
    ;
    src = $(src:J="
") ;

    STR on $(<) = $(src) ;
}
actions manifest_in { @($(STDOUT):E=$(STR)) > "$(<)" }

## 
################################################################################
make distro-bindings : setup.py : @release-py : <dependency>stage_lib ;
actions release-py {
    cd $(PYTHON_OUT)
    python $(PROJ_ROOT)/build/distro_bindings.py $(PROJ_ROOT)
    python $(>) sdist -d $(OUT)
}
